// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DONOR
  SERVICE_PROVIDER
  NGO
  LOGISTICS
  VOLUNTEER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum DonationType {
  DIRECT
  PACK_SPONSORSHIP
  NGO_NEED
}

enum DonationStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  VERIFIED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  PREPARING
  IN_TRANSIT
  DELIVERED
  VERIFIED
}

enum ImpactCategory {
  MEALS_SERVED
  WASTE_REDUCED
  COMMUNITY_ENGAGEMENT
  EDUCATION
  HEALTH
  ENVIRONMENT
  ECONOMIC
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String
  firstName     String?
  lastName      String?
  role          UserRole   @default(DONOR)
  status        UserStatus @default(ACTIVE)
  walletAddress String?    @unique

  // Profile data
  avatar      String?
  bio         String? @db.Text
  companyName String?
  address     String?
  phone       String?

  // Verification
  emailVerified         Boolean @default(false)
  verificationDocuments Json?

  // Settings and preferences
  preferences Json? @default("{}")

  // Points system
  impactPoints Int @default(0)

  // Security
  lastLogin     DateTime?
  failedLogins  Int       @default(0)
  resetToken    String?
  resetTokenExp DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  donations  Donation[]
  deliveries Delivery[] @relation("LogisticsDeliveries")

  @@index([email])
  @@map("users")
}

model Donation {
  id                 String              @id @default(cuid())
  title              String
  description        String
  quantity           Int
  unit               String
  category           String
  pickupAddress      String
  images             String[]
  status             DonationStatus      @default(PENDING)
  contractAddress    String?             @unique
  evidence           Json?
  verificationStatus VerificationStatus? @default(PENDING)
  verifiedAt         DateTime?
  verifiedBy         String?
  expiryDate         DateTime?

  // Relations
  donorId    String
  donor      User      @relation(fields: [donorId], references: [id])
  deliveryId String?
  delivery   Delivery? @relation(fields: [deliveryId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("donations")
}

model Delivery {
  id                 String              @id @default(cuid())
  status             DeliveryStatus      @default(PENDING)
  evidence           Json?
  verificationStatus VerificationStatus? @default(PENDING)
  verifiedAt         DateTime?
  verifiedBy         String?
  pickupLocation     String
  dropoffLocation    String
  scheduledTime      DateTime
  actualTime         DateTime?
  gpsData            Json?

  // Relations
  logisticsId String
  logistics   User       @relation("LogisticsDeliveries", fields: [logisticsId], references: [id])
  donations   Donation[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("deliveries")
}
